#!/usr/bin/env ruby
require 'optparse'
require 'github-to-canvas'
options = {}
OptionParser.new do |opts|
  opts.banner = <<-EOBANNER
    GitHub To Canvas
    ====================
    A tool for migrating and aligning GitHub content with the Canvas LMS. Access
    to the Canvas API and a GitHub org required. For configuration and setup, visit
    https://github.com/learn-co-curriculum/github-to-canvas

    Commands:
    github-to-canvas --create-lesson COURSE
    github-to-canvas --create-lesson COURSE [--save]
    github-to-canvas --create-lesson COURSE [--branch BRANCH]
    github-to-canvas --create-lesson COURSE [--branch BRANCH] [--name NAME]
    github-to-canvas --create-lesson COURSE [--branch BRANCH] [--name NAME] [--type TYPE]
    github-to-canvas --create-lesson COURSE [--fis-links]
    github-to-canvas --create-lesson COURSE [--fis-links] [--remove-header-and-footer]
    github-to-canvas --align
    github-to-canvas --align [--branch BRANCH]
    github-to-canvas --align [--only-content]
    github-to-canvas --align [--branch BRANCH] [--fis-links]
    github-to-canvas --info COURSE
    github-to-canvas --version

    
    Run these commands from inside a local GitHub repository. This gem is built for Flatiron School's internal use.
    Some default behaviors assume this, like the default Canvas API path.

    Example usage:

    github-to-canvas --create-lesson 154                                      -> Creates a lesson in course 154, derives the name and type from the local repo
    github-to-canvas --create-lesson 154 --name "Fetch Lab"                   -> Creates a lesson in course 154 with the provided name, derives the type from the local repo
    github-to-canvas --create-lesson 154 --name "Fetch Lab" --type assignment -> Creates an assignment in course 154 with the provided name
    github-to-canvas --create-lesson 154 --name "Fetch Lab" --branch solution -> Creates a lesson in course 154 with the provided name, uses the repository's solution branch and derives the type from the local repo
    github-to-canvas --align                                                  -> Patches existing lessons in Canvas based on the .canvas file  
    github-to-canvas --align --fis-links                                      -> Patches existing lessons in Canvas based on the .canvas file, adds additional Flatiron School specific HTML and meta-data
    github-to-canvas --align --remove-header-and-footer                       -> Patches existing lessons in Canvas based on the .canvas file, removes top lesson header before converting to HTML
    github-to-canvas --info COURSE                                            -> Displays a course's lesson and assignment names    

  EOBANNER

  opts.on("-cCOURSE", "--create-lesson COURSE", 
          "Creates a new canvas lesson, converting the local repository's README.md to HTML. Adds .canvas file to remote repository") do |course| 
            options[:create_lesson] = true
            options[:course] = course
          end
  opts.on("-bBRANCH", "--branch BRANCH", 
          "Sets the repository branch used for lesson creation") do |branch| 
            options[:branch] = branch
          end
  opts.on("-nNAME", "--name NAME", 
          "Sets the name of the new Canvas lesson to be created. If no name is given, repository folder name is used") do |name| 
            options[:name] = name
          end
  opts.on("-tTYPE", "--type TYPE", 
          "Sets the type Canvas lesson to be created (page or assignment). If no type, type decided based on repository structure") do |type| 
            if type == 'page' || type == 'assignment' || type == 'discussion'
              options[:type] = type
            else
              puts "Invalid type. Defaulting to page"
              options[:type] = "page"
            end
          end
  opts.on("-fFILE", "--file FILE", 
          "Looks for and uses a markdown file in the currentt folder as source for conversion. Default file is README.md. Skips writing .canvas to repository") do |file| 
            options[:file_to_convert] = file
          end
  opts.on("-s", "--save-to-github",
          "Creates a local .canvas file and attempts to commit and push it to the GitHub repository") do |s| 
            options[:save_to_github] = true 
          end
  opts.on("-a", "--align", 
          "Updates a canvas lesson based on the local repository's README.md") do |a|
            options[:align] = true 
          end
  opts.on("-v", "--version",
          "Displays current gem version") do |v|
            options[:version] = true
          end
  opts.on("-l", "--fis-links",
          "Adds additional Flatiron School HTML after markdown conversion") do |f|
            options[:fis] = true
          end
  opts.on("--fork",
          "Used with --fis-links, adds fork button to HTML header injected into Canvas lesson") do |remote|
            options[:forkable] = true
          end
  opts.on("-r", "--remove-header-and-footer",
          "Removes top lesson header and any Learn.co specific footer links before converting to HTML") do |r|
            options[:remove_header_and_footer] = true
          end
  opts.on("--course COURSE",
          "For align functionality only - updates the HTML content of a lesson using the provided course ID. Use with --id.") do |course|
            options[:course] = course
          end
  opts.on("--id ID",
          "For align functionality only - updates the HTML content of a lesson using the provided assignment or page ID. Use with --course.") do |id|
            options[:id] = id
          end
  opts.on("-o", "--only-content",
          "For align functionality only - updates the HTML content of a lesson without changing the name") do |o|
            options[:only_content] = true
          end
  opts.on("-q COURSE", "--query COURSE", 
          "Displays a course's lessons and assignments") do |course|
            options[:query] = course
          end
  opts.on("--remote",
          "Retrieves a Canvas lesson. Requires --course and --id") do |remote|
            options[:remote] = true
          end
  
  
end.parse!

if options[:version]
  GithubToCanvas.new(mode: 'version',  course: nil)
end

if options[:query]
  GithubToCanvas.new(mode: 'query',  course: options[:query], id: options[:id])
end

if options[:remote]
  if !options[:course] || !options[:id]
    puts "Both --course and --id required when using --remote"
    abort
  end
  GithubToCanvas.new(mode: 'remote', course: options[:course], id: options[:id])
end

if !options[:type]
  if Dir.glob("**/*/").empty?
    options[:type] = "page"
  else
    options[:type] = "assignment"
  end
end

if !options[:branch]
  options[:branch] = 'master'
end

if !options[:name]
  if options[:file_to_convert]
    markdown = File.read("#{Dir.pwd}/#{options[:file_to_convert]}")
    if markdown.match?(/^# .+?\n\n/)
      options[:name] = markdown.match(/^# .+?\n\n/)[0].strip.gsub("# ","").gsub("#","")
    elsif markdown.match?(/^# .+?\n/)
      options[:name] = markdown.match(/^# .+?\n/)[0].strip.gsub("# ","").gsub("#","")
    else
      options[:name] = options[:file_to_convert]
    end
  else
    markdown = File.read("#{Dir.pwd}/README.md")
    if markdown.match?(/^# .+?\n\n/)
      options[:name] = markdown.match(/^# .+?\n\n/)[0].strip.gsub("# ","").gsub("#","")
    elsif markdown.match?(/^# .+?\n/)
      options[:name] = markdown.match(/^# .+?\n/)[0].strip.gsub("# ","").gsub("#","")
    else
      options[:name] = File.basename(Dir.getwd)
    end    
    options[:file_to_convert] = "README.md"
  end
end

if !options[:file_to_convert]
  options[:file_to_convert] = "README.md"
end

if options[:create_lesson]
  GithubToCanvas.new(mode: "create", 
                    course: options[:course], 
                    filepath: Dir.pwd, 
                    file_to_convert: options[:file_to_convert],
                    branch: options[:branch], 
                    name: options[:name], 
                    type: options[:type], 
                    save_to_github: !!options[:save_to_github], 
                    fis_links: !!options[:fis], 
                    remove_header_and_footer: !!options[:remove_header_and_footer],
                    only_update_content: !!options[:only_content]),
                    forkable: !!options[:forkable]
end

if options[:align]
  GithubToCanvas.new(mode: "align", 
                    course: options[:course], 
                    id: options[:id],
                    filepath: Dir.pwd,
                    file_to_convert: options[:file_to_convert], 
                    branch: options[:branch],
                    name: options[:name],
                    type: options[:type],
                    save_to_github: !!options[:save_to_github], 
                    fis_links: !!options[:fis], 
                    remove_header_and_footer: !!options[:remove_header_and_footer],
                    only_update_content: !!options[:only_content]),
                    forkable: !!options[:forkable]
end